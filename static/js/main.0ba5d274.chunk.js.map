{"version":3,"sources":["helpers/api.ts","store/loading.ts","store/actionTypes.ts","store/errors.ts","store/query.ts","components/User.tsx","components/Comment.tsx","components/CommentsList.tsx","store/posts.ts","components/Post.tsx","components/PostsList.tsx","helpers/use-debounce.ts","App.tsx","store/index.ts","index.tsx"],"names":["URL","getPreparedDataFromServer","a","Promise","all","fetch","then","response","json","postsFromServer","commentsFromServer","usersFromServer","preparedPosts","map","post","user","find","id","userId","comments","filter","comment","postId","handleSuccessfulLoad","data","type","posts","reducer","loading","action","hanldeErrorLoad","hasErrors","query","User","className","name","href","email","address","street","suite","city","Comment","body","CommentsList","key","Post","dispatch","useDispatch","onClick","title","PostsList","useSelector","state","deboucedValue","searchValue","delay","useState","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","useDebounce","getSortedPosts","useCallback","normalizedQuery","toLowerCase","includes","visiblePosts","useMemo","postItem","App","loadingStatus","isLoading","errorStatus","getData","length","disabled","onChange","e","searchVal","target","value","placeholder","rootReducer","combineReducers","postsReducer","loadingReducer","errorsReducer","queryReducer","store","createStore","composeWithDevTools","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0ba5d274.chunk.js","sourcesContent":["const URL = 'https://jsonplaceholder.typicode.com';\n\nconst getPostsFromServer = () => {\n  return fetch(`${URL}/posts`)\n    .then(response => response.json());\n};\n\nconst getCommentsFromServer = () => {\n  return fetch(`${URL}/comments`)\n    .then(response => response.json());\n};\n\nconst getUsersFromServer = () => {\n  return fetch(`${URL}/users`)\n    .then(response => response.json());\n};\n\nexport const getPreparedDataFromServer = async () => {\n  const [postsFromServer,\n    commentsFromServer,\n    usersFromServer] = await Promise.all([getPostsFromServer(),\n    getCommentsFromServer(), getUsersFromServer()]);\n\n  const preparedPosts = postsFromServer.map((post: Post) => ({\n    ...post,\n    user: usersFromServer.find((user: User) => user.id === post.userId),\n    comments: commentsFromServer.filter(\n      (comment: Comment) => comment.postId === post.id,\n    ),\n  }));\n\n  return preparedPosts;\n};\n","import { AnyAction } from 'redux';\nimport {\n  START_LOADING_DATA, SUCCESSFUL_LOADING,\n  HANDLE_ERROR_LOADING,\n} from './actionTypes';\n\nexport const startLoadingData = () => ({ type: START_LOADING_DATA });\nexport const handleSuccessfulLoad = (data: Post) => ({ type: SUCCESSFUL_LOADING, posts: data });\nexport const hanldeErrorLoad = () => ({ type: HANDLE_ERROR_LOADING });\n\nconst reducer = (loading = false, action: AnyAction) => {\n  switch (action.type) {\n    case START_LOADING_DATA:\n      return true;\n    case SUCCESSFUL_LOADING:\n      return false;\n    case HANDLE_ERROR_LOADING:\n      return true;\n    default:\n      return loading;\n  }\n};\n\nexport default reducer;\n","export const START_LOADING_DATA = 'START_LOADING_DATA';\nexport const SUCCESSFUL_LOADING = 'SUCCESSFUL_LOADING';\nexport const HANDLE_ERROR_LOADING = 'HANDLER_ERROR_LOADING';\nexport const SET_QUERY = 'SET_QUERY';\nexport const REMOVE_POST = 'REMOVE_POST';\n","import { AnyAction } from 'redux';\nimport { HANDLE_ERROR_LOADING } from './actionTypes';\n\nexport const hanldeErrorLoad = () => ({ type: HANDLE_ERROR_LOADING });\n\nconst reducer = (hasErrors = false, action: AnyAction) => {\n  switch (action.type) {\n    case HANDLE_ERROR_LOADING:\n      return true;\n    default:\n      return hasErrors;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\nimport { SET_QUERY } from './actionTypes';\n\nexport const handleSearchQuery = (searchQuery: string) => ({ type: SET_QUERY, query: searchQuery });\n\nconst reducer = (query = '', action: AnyAction) => {\n  switch (action.type) {\n    case SET_QUERY: {\n      return action.query;\n    }\n\n    default:\n      return query;\n  }\n};\n\nexport default reducer;\n","import React from 'react';\n\ntype Props = {\n  user: User;\n};\n\nconst User: React.FunctionComponent<Props> = ({ user }) => {\n  return (\n    <div className=\"post__author\">\n      <span className=\"post__author-name\">{user.name}</span>\n      <a href=\"link\" className=\"post__author-email\">\n        {user.email}\n      </a>\n      <span className=\"post__author-address\">\n        {`${user.address.street} ${user.address.suite} ${user.address.city}`}\n      </span>\n    </div>\n  );\n};\n\nexport default User;\n","import React from 'react';\n\ntype Props = {\n  comment: Comment;\n};\n\nconst Comment: React.FunctionComponent<Props> = ({ comment }) => {\n  return (\n    <section className=\"post__comment\">\n      <p className=\"post__comment-body\">{comment.body}</p>\n      <div className=\"post__comment-author\">\n        <a href=\"/\" className=\"post__comment-author-email\">\n          {comment.email}\n        </a>\n        <span className=\"post__comment-author-name\">{comment.name}</span>\n      </div>\n    </section>\n  );\n};\n\nexport default Comment;\n","import React from 'react';\nimport Comment from './Comment';\n\ntype Props = {\n  comments: Comment[];\n};\n\nconst CommentsList: React.FunctionComponent<Props> = ({ comments }) => {\n  return (\n    <section className=\"post__comments-section\">\n      <h3 className=\"post__comments-title\">Comments:</h3>\n      {comments.map((comment) => (\n        <Comment comment={comment} key={comment.id} />\n      ))}\n    </section>\n  );\n};\n\nexport default CommentsList;\n","import { AnyAction } from 'redux';\nimport { SUCCESSFUL_LOADING, REMOVE_POST } from './actionTypes';\n\nexport const handleSuccessfulLoad = (data: Post) => ({ type: SUCCESSFUL_LOADING, posts: data });\nexport const removePost = (postId: number) => ({ type: REMOVE_POST, postId });\n\nconst reducer = (posts = [], action: AnyAction) => {\n  switch (action.type) {\n    case SUCCESSFUL_LOADING:\n      return action.posts;\n    case REMOVE_POST:\n      return posts.filter((post: Post) => post.id !== action.postId);\n    default:\n      return posts;\n  }\n};\n\nexport default reducer;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport User from './User';\nimport './Post.scss';\nimport CommentsList from './CommentsList';\nimport { removePost } from '../store/posts';\n\ntype Props = {\n  post: Post;\n};\n\nconst Post: React.FunctionComponent<Props> = ({ post }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <article className=\"post\">\n      <button\n        type=\"button\"\n        onClick={() => dispatch(removePost(post.id))}\n        className=\"button\"\n      >\n        Remove\n      </button>\n      <h2 className=\"post__title\">{post.title}</h2>\n      <p className=\"post__text\">{post.body}</p>\n      <User user={post.user} />\n      <CommentsList comments={post.comments} />\n    </article>\n  );\n};\n\nexport default Post;\n","import React, { useMemo, useCallback } from 'react';\nimport { useSelector } from 'react-redux';\nimport Post from './Post';\nimport { RootState } from '../store';\nimport { useDebounce } from '../helpers/use-debounce';\n\nconst PostsList: React.FunctionComponent = () => {\n  const posts = useSelector((state: RootState) => state.posts);\n  const searchQuery = useSelector((state: RootState) => state.query);\n  const deboucedValue = useDebounce(searchQuery, 1000);\n\n  const getSortedPosts = useCallback(() => {\n    const normalizedQuery: string = deboucedValue.toLowerCase();\n\n    return posts\n      .filter((post: Post) => (post.body + post.title)\n        .toLowerCase()\n        .includes(normalizedQuery));\n  }, [posts, deboucedValue]);\n\n  const visiblePosts = useMemo(() => getSortedPosts(), [getSortedPosts]);\n\n  return (\n    <div className=\"container\">\n      {visiblePosts.map((postItem: Post) => <Post post={postItem} key={postItem.id} />)}\n    </div>\n  );\n};\n\nexport default PostsList;\n","import { useState, useEffect } from 'react';\n\nexport const useDebounce = (searchValue: string, delay: number) => {\n  const [debouncedValue, setDebouncedValue] = useState(searchValue);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(searchValue);\n    }, delay);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  },\n  [searchValue, delay]);\n\n  return debouncedValue;\n};\n","import React from 'react';\nimport './App.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getPreparedDataFromServer } from './helpers/api';\nimport { RootState } from './store';\nimport { startLoadingData, handleSuccessfulLoad } from './store/loading';\nimport { hanldeErrorLoad } from './store/errors';\nimport { handleSearchQuery } from './store/query';\nimport PostsList from './components/PostsList';\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const posts = useSelector((state: RootState) => state.posts);\n  const loadingStatus = useSelector((state: RootState) => state.isLoading);\n  const errorStatus = useSelector((state: RootState) => state.hasErrors);\n\n  const getData = async () => {\n    try {\n      dispatch(startLoadingData());\n      const data = await getPreparedDataFromServer();\n\n      dispatch(handleSuccessfulLoad(data));\n    } catch {\n      dispatch(hanldeErrorLoad);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Dynamic list of posts</h1>\n      {errorStatus && <h1>Some errors appeared. Please, try again</h1>}\n      {posts.length === 0 ? (\n        <button\n          type=\"button\"\n          onClick={getData}\n          disabled={loadingStatus}\n          className=\"button\"\n        >\n          {loadingStatus ? 'Loading...' : 'Load'}\n        </button>\n      ) : (\n        <>\n          <input\n            type=\"text\"\n            onChange={(e) => {\n              const searchVal = e.target.value;\n\n              dispatch(handleSearchQuery(searchVal));\n            }}\n            placeholder=\"search the post\"\n          />\n          <PostsList />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import { createStore, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport loadingReducer from './loading';\nimport errorsReducer from './errors';\nimport queryReducer from './query';\nimport postsReducer from './posts';\n\nexport type RootState = {\n  posts: [];\n  isLoading: boolean;\n  hasErrors: boolean;\n  query: string;\n};\n\nconst rootReducer = combineReducers({\n  posts: postsReducer,\n  isLoading: loadingReducer,\n  hasErrors: errorsReducer,\n  query: queryReducer,\n});\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport store from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}